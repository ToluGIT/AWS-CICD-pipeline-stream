version: 0.2
env:
  parameter-store:
    USERNAME: /myapp/docker-credentials/username
    PASSWORD: /myapp/docker-credentials/password
    KEY: /myapp/api/key
    SONAR_TOKEN: /myapp/sonarcloud/token
    SONAR_PROJECT_KEY: /myapp/sonarcloud/project-key
    AWS_ACCOUNT_ID: /myapp/aws/account-id
    AWS_REGION: /myapp/aws/region
  variables:
    SONAR_ORG: "tolugit"
    SONAR_SCANNER_VERSION: "6.2.1.4610" 
    ECR_REPOSITORY: "toluid/netflix-react-app"  
    ECS_CLUSTER: "ecsstream"
    ECS_SERVICE: "my-ecs-service"
    ECS_TASK_DEFINITION: "task-definition.json"

phases:
  install:
    runtime-versions:
      java: corretto17
      nodejs: 18
    commands:
      - echo "Installing dependencies..."
      - npm install
      - npm audit --json > audit-report.json || true
      - yarn add eslint eslint-plugin-security --dev
      - echo "Installing SonarScanner..."
      - export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-${SONAR_SCANNER_VERSION}-linux-x64
      - curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux-x64.zip
      - unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
      - export PATH=$SONAR_SCANNER_HOME/bin:$PATH
      - export SONAR_SCANNER_OPTS="-server"
      - sonar-scanner --version
      - echo "SonarScanner installation complete."

  pre_build:
    commands:
      - java -version
      - echo "Running static code analysis with SonarCloud..."
      - sonar-scanner -Dsonar.organization=$SONAR_ORG -Dsonar.projectKey=$SONAR_PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
      - echo "SonarCloud analysis completed."
      - echo "Checking dependency vulnerabilities..."
      - yarn audit --level high || echo "Vulnerabilities found, but continuing build..."

  build:
    commands:
      - echo "Fetching sensitive values from Parameter Store..."
      - TMDB_API_KEY=$(aws ssm get-parameter --name "/myapp/api/key" --with-decryption --query "Parameter.Value" --output text)
      - EXECUTION_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/EC2roleStream-app"
      - TASK_ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/EC2roleStream-app"
      - ECR_IMAGE="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPOSITORY:latest"

      - echo "Replacing placeholders in task-definition.json..."
      - sed -i "s|{{TMDB_V3_API_KEY}}|$TMDB_API_KEY|g" task-definition.json
      - sed -i "s|{{EXECUTION_ROLE_ARN}}|$EXECUTION_ROLE_ARN|g" task-definition.json
      - sed -i "s|{{TASK_ROLE_ARN}}|$TASK_ROLE_ARN|g" task-definition.json
      - sed -i "s|{{ECR_IMAGE}}|$ECR_IMAGE|g" task-definition.json

      - echo "Building Docker image..."
      - docker login -u $USERNAME -p $PASSWORD
      - docker build . -t toluid/netflix-react-app:latest --build-arg TMDB_V3_API_KEY=$KEY
      - echo "Scanning Docker image for vulnerabilities with Trivy..."
      - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - trivy image toluid/netflix-react-app:latest || exit 1

      - echo "Building and tagging Docker image..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - docker build --build-arg TMDB_V3_API_KEY=$KEY -t $ECR_REPOSITORY:latest .
      - echo "Tagging Docker image for ECR..."
      - docker tag $ECR_REPOSITORY:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest
      - trivy image toluid/netflix-react-app:latest || exit 1
      - echo "Pushing Docker image to Amazon ECR..."
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest

  post_build:
    commands:
      - echo "Build complete and Docker image pushed successfully."
      - echo "Updating ECS task definition..."
      - aws ecs register-task-definition --cli-input-json file://$ECS_TASK_DEFINITION
      - echo "Updating ECS service..."
      - echo '[{"name":"netflix-react-container","image":"'"${AWS_ACCOUNT_ID}"'.dkr.ecr.'"${AWS_REGION}"'.amazonaws.com/'"${ECR_REPOSITORY}"':latest"}]' > imagedefinitions.json
      - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
      - echo "Deployment to ECS complete!"

artifacts:
  files:
    - 'Dockerfile'
    - 'appspec.yml'
    - 'package.json'
    - 'scripts/**/*'
    - 'yarn.lock'
    - 'public/**/*'
    - 'src/**/*'
    - 'task-definition.json'
    - 'imagedefinitions.json'
  discard-paths: no
